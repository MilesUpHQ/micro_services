# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: order_service.proto

require 'google/protobuf'


descriptor_data = "\n\x13order_service.proto\x12\tecommerce\"+\n\x0bProductInfo\x12\n\n\x02id\x18\x01 \x01(\t\x12\x10\n\x08quantity\x18\x02 \x01(\x05\">\n\x12\x43reateOrderRequest\x12(\n\x08products\x18\x01 \x03(\x0b\x32\x16.ecommerce.ProductInfo\"\x1b\n\rOrderResponse\x12\n\n\x02id\x18\x01 \x01(\t2V\n\x0cOrderService\x12\x46\n\x0b\x43reateOrder\x12\x1d.ecommerce.CreateOrderRequest\x1a\x18.ecommerce.OrderResponseb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Ecommerce
  ProductInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("ecommerce.ProductInfo").msgclass
  CreateOrderRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("ecommerce.CreateOrderRequest").msgclass
  OrderResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("ecommerce.OrderResponse").msgclass
end

module OrderServicePb
end

module OrderServiceServicesPb

end